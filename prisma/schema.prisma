// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     Int           @id @default(autoincrement())
  corporateAccountNumber String
  corporateName          String
  userId                 String        @unique
  username               String        @unique
  role                   Role
  phoneNumber            String
  email                  String        @unique
  password               String
  createdAt              DateTime      @default(now())
  updatedAt              DateTime      @updatedAt
  transactions           Transaction[] // Each user can have multiple transactions
}

model Account {
  id            Int                 @id @default(autoincrement())
  accountNumber String
  bank          String
  accountName   String
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  transactions  TransactionDetail[]
}

model Transaction {
  id                  Int                 @id @default(autoincrement())
  referenceNo         String              @unique
  totalTransferAmount Float
  totalTransferRecord Int
  fromAccountNumber   String
  transferDate        DateTime
  role                Role
  submitDateTime      DateTime
  instructionType     InstructionType
  makerUsername       String
  transferType        TransferType
  status              Status
  userId              Int
  user                User                @relation(fields: [userId], references: [id]) // Each transaction belongs to a single user
  transactionDetails  TransactionDetail[] // A transaction can have multiple transaction details
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
}

model TransactionDetail {
  id            Int         @id @default(autoincrement())
  transactionId Int
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  accountNumber String
  accountBank   String
  accountName   String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  account       Account?    @relation(fields: [accountId], references: [id]) // Renamed from Account to account
  accountId     Int? // Marked as optional
}

enum Role {
  MAKER
  APPROVER
}

enum InstructionType {
  IMMEDIATE
  STANDING_INSTRUCTION
}

enum TransferType {
  ONLINE
  OFFLINE
}

enum Status {
  AWAITING_APPROVAL
  APPROVED
  REJECTED
}
